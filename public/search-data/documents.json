[
  {
    "slug": "/browser/extension",
    "title": "Browser Extension",
    "description": "",
    "content": "<Note title=\"Note\" type=\"success\" className=\"mb-8\">\n  Before using browser extension, you need setup [React](/docs/react) or [Vue.js](/docs/vue) first.\n</Note>\n\n# [Chrome Extension](https://chromewebstore.google.com/detail/click-to-component/hdiiegojkjkgaakbdjpoaaadhnddpfdc)\n\nInstall extension from [Click To Component - Chrome Web Store](https://chromewebstore.google.com/detail/click-to-component/hdiiegojkjkgaakbdjpoaaadhnddpfdc)\n"
  },
  {
    "slug": "/browser",
    "title": "Browser",
    "description": "",
    "content": "After you setup [React](/docs/react) or [Vue.js](/docs/vue), source code locations info will set in your build output.\n\nThe [browser extension](/docs/browser/extension) or [browser script](/docs/browser/script) can help you get thouse source code locations, and generat various URI you wanted.\n"
  },
  {
    "slug": "/browser/script",
    "title": "Browser  Script",
    "description": "",
    "content": "<Note title=\"Note\" type=\"success\" className=\"mb-8\">\n  Before using browser script, you need setup [React](/docs/react) or [Vue.js](/docs/vue) first.\n</Note>\n\n<Step>\n  <StepItem title=\"Installation\" />\n\n  <StepItem title=\"Usage\">\n    <Note title=\"Important\" type=\"danger\" className=\"mb-8\">\n      Do not import `click-to-component-browser` in product enviroument.\n    </Note>\n\n    Import `click-to-component-browser` in your project's entry file.\n\n    ```js\n    if (process.env.NODE_ENV === 'development') {\n      import(\"click-to-component-browser\");\n    }\n    ```\n  </StepItem>\n</Step>\n"
  },
  {
    "slug": "/introduction",
    "title": "Introduction",
    "description": "How to using click-to-component and why you should use it.",
    "content": "![Example](/images/example.jpg \"click-to-component\")\n\n## Click To Component\n\nWelcome to **Click To Component**, a powerful and flexible tool that help you click a component in your browser to instantly open the source in VS Code. It also support custom config open WebStorm, Cursor, GitHub, etc.\n\n<CardGrid>\n  <Card subtitle=\"Setup\" title=\"React\" description=\"\" href=\"/docs/react\" />\n\n  <Card subtitle=\"Setup\" title=\"Vue.js\" description=\"\" href=\"/docs/vue\" />\n\n  <Card subtitle=\"\" title=\"Browser Extension\" description=\"\" href=\"/docs/browser/extension\" />\n\n  <Card subtitle=\"\" title=\"Browser Script\" description=\"\" href=\"/docs/browser/script\" />\n</CardGrid>\n\n{/* ## Why Click To Component? */}\n\n{/* Click To Component was created as an open-source project to help the community streamline their documentation process, enabling developers to focus on more critical\n  tasks. Built with scalability in mind, it adapts to projects of all sizes, from single-page guides to comprehensive knowledge bases.\n\n  The integration of MDX, custom components and Tailwind CSS ensures an intuitive experience, simplifying both content creation and management.\n\n  - **Product Guides**: Comprehensive manuals for product usage, setup and troubleshooting.\n  - **Business Documentation**: Clear and structured documentation for internal processes, policies and systems.\n  - **Technical Manuals**: Detailed guides for APIs, software development kits (SDKs) and technical processes.\n\n  Click To Component offers extensive customization options, allowing you to easily align the design and functionality with your branding. */}\n\n{/* ## Key Features\n\n  Here are some of the features that make **Click To Component** ideal for building your documentation:\n\n  | Feature                              | Description                                                                                                     |\n  | ------------------------------------ | --------------------------------------------------------------------------------------------------------------- |\n  | **Content Creation**                 | Write documentation using Markdown with JSX, custom components and Mermaid.js for diagrams.                     |\n  | **Navigation & Structure**           | Organize content with multi-level navigation, automatically generated tables of contents and smooth pagination. |\n  | **Code Features**                    | Syntax highlighting, enhanced code blocks and a code switcher with copy functionality.                          |\n  | **Advanced Search**                  | Fuzzy search with term highlighting for quick and accurate results.                                             |\n  | **Theming & Layout**                 | Supports light/dark modes with automatic switching and responsive design.                                       |\n  | **Math & Tables**                    | Seamless integration of LaTeX for math and structured tables.                                                   |\n  | **SEO & Meta Tags**                  | Built-in SEO, metadata generation and control over meta tags for better search rankings and social sharing.     |\n  | **AI-powered Docs (In Development)** | Future feature for AI-driven content discussions and search.                                                    | */}\n\n{/* ## How to Use These Click To Component\n\n  You'll find the documentation's navigation bar on the left side of the screen. The pages are organized in a logical sequence, progressing from foundational\n  topics to more advanced concepts, allowing you to follow along step-by-step as you build your documentation. However, feel free to explore the content in\n  any order, selecting the sections most relevant to your use case.\n\n  On the right side of the screen, a table of contents provides easy navigation between sections of each page. For quick access to specific content, you can\n  use the search bar at the top or the search shortcut (`Ctrl+K` or `Cmd+K`).\n\n  Head over to the [Installation Guide](/docs/introduction/installation).\n\n  ## Join our Community\n\n  If you have questions about anything related to Click To Component, you're always welcome to ask our community on [GitHub](https://github.com/rubixvi/rubix-Click To Component), [X (Twitter)](https://x.com/rubixstory), [Facebook](https://www.facebook.com/rubixstudios)\n  and [Reddit](https://www.reddit.com/r/RubixStudios/). */}\n"
  },
  {
    "slug": "/others",
    "title": "Others",
    "description": "",
    "content": "<CardGrid>\n  <Card subtitle=\"\" title=\"Taro\" description=\"Get Source Location Via Inspect Style\" href=\"/others/taro\" />\n</CardGrid>\n"
  },
  {
    "slug": "/others/taro",
    "title": "Setup",
    "description": "This guide covers the setup of Click To Component of React.",
    "content": "<Step>\n  <StepItem title=\"Installation\" />\n\n  <StepItem title=\"Usage\">\n    <Note title=\"Important\" type=\"danger\" className=\"mb-8\">\n      Do not enable `babel-plugin-transform-react-jsx-source-to-style` in product enviroument.\n    </Note>\n  </StepItem>\n\n  <StepItem title=\"Get Source Location Via Inspect Style\">\n    You can copy the value of  `--source-code-location` CSS variable, and using editor `Go to File...` function to open file and jump to the specified line.\n  </StepItem>\n</Step>\n"
  },
  {
    "slug": "/react",
    "title": "Setup",
    "description": "This guide covers the setup of Click To Component of React.",
    "content": "<Note title=\"Note\" className=\"mb-8\">\n  If you are using react \\< 19 (Next.js \\< 14.1.1) you can using [`@babel/plugin-transform-react-jsx`](https://babeljs.io/docs/babel-plugin-transform-react-jsx).\n  It may already installed and enabled in your project. So you can skip setp 1 and 2.\n</Note>\n\n<Step>\n  <StepItem title=\"Installation\" />\n\n  <StepItem title=\"Usage\">\n    <Note title=\"Important\" type=\"danger\" className=\"mb-8\">\n      Do not enable `babel-plugin-transform-react-jsx-data-source-code-location` in product enviroument.\n    </Note>\n  </StepItem>\n\n  <StepItem title=\"Click To Component\">\n    You can using [browser extension](/docs/browser/extension) to start click to component.\n\n    If you want to start click to component without browser extension, you can using [browser script](/docs/browser/script).\n  </StepItem>\n</Step>\n"
  },
  {
    "slug": "/vue",
    "title": "Setup",
    "description": "This guide covers the setup of Click To Component of Vue.js.",
    "content": "<Step>\n  <StepItem title=\"Installation\" />\n\n  <StepItem title=\"Usage\" />\n\n  <StepItem title=\"Click To Component\">\n    You can using [browser extension](/docs/browser/extension) to start click to component.\n\n    If you want to start click to component without browser extension, you can using [browser script](/docs/browser/script).\n  </StepItem>\n</Step>\n"
  }
]